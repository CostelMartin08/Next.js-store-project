// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  order                 Orders[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Laptops {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  photo         String[]
  description   String?
  stock         Int
  price         Int
  discountPrice Int
}

model Tablets {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  photo         String[]
  description   String?
  stock         Int
  price         Int
  discountPrice Int
}

model Smartphones {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  photo         String[]
  description   String?
  stock         Int
  price         Int
  discountPrice Int
}

model TV {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  photo         String[]
  description   String?
  stock         Int
  price         Int
  discountPrice Int
}

model Orders {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  contact    String
  country    String
  name       String
  address    String
  postalCode String
  city       String
  state      String
  date       DateTime
  products   Product[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  ordersId      String?  @db.ObjectId
  name          String
  photo         String[]
  category      String
  count         Int
  price         Int
  discountPrice Int

  Orders Orders? @relation(fields: [ordersId], references: [id], onDelete: Cascade)
}
